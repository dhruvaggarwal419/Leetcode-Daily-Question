class Solution {
public:
    int robotSim(vector<int>& commands, vector<vector<int>>& obstacles) {
        unordered_set<string> s;
        for (int i=0; i<obstacles.size(); i++) {
            int x = obstacles[i][0];
            int y = obstacles[i][1];
            string key = to_string(x) + "_" + to_string(y);
            s.insert(key);
        }
        pair<int, int> dir = {0, 1};
        int maxD = 0;
        int x = 0, y = 0;
        for (int i=0; i<commands.size(); i++) {
            if (commands[i] == -2) {
                dir = {-dir.second, dir.first};
            } else if (commands[i] == -1) {
                dir = {dir.second, -dir.first};
            } else {
                for (int j = 1; j <= commands[i]; j++) {
                    int newX = x + dir.first;
                    int newY = y + dir.second;
                    string temp = to_string(newX) + "_" + to_string(newY);
                    if (s.find(temp) != s.end()) {
                        break;
                    }
                    x = newX;
                    y = newY;
                }
            }
            maxD = max(maxD, x*x+y*y);
        }
        return maxD;
    }
};
